import sqlite3
import re

#Crear la base de datos
def crear_base_de_datos():
    conexion = sqlite3.connect("usuarios.db")
    cursor = conexion.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre_usuario TEXT UNIQUE NOT NULL,
            contrasena TEXT NOT NULL,
            rol TEXT CHECK(rol IN ('administrador', 'estandar')) NOT NULL
        )
    ''')
    conexion.commit()
    conexion.close()

#Validar contrase√±a segura
def validar_contrasena(contrasena):
    if len(contrasena) < 6:
        return False
    tiene_letra = re.search(r"[A-Za-z]", contrasena)
    tiene_numero = re.search(r"[0-9]", contrasena)
    return bool(tiene_letra and tiene_numero)

#Registrar usuario
def registrar_usuario():
    nombre = input("Ingrese nombre de usuario: ").strip()
    contrasena = input("Ingrese contrase√±a (m√≠n. 6 caracteres, letras y n√∫meros): ").strip()
    rol = input("Rol (administrador / estandar): ").strip().lower()

    if rol not in ["administrador", "estandar"]:
        print("‚ö†Ô∏è Rol inv√°lido. Debe ser 'administrador' o 'estandar'.")
        return

    if not validar_contrasena(contrasena):
        print("‚ö†Ô∏è Contrase√±a inv√°lida. Debe tener al menos 6 caracteres y contener letras y n√∫meros.")
        return

    conexion = sqlite3.connect("usuarios.db")
    cursor = conexion.cursor()
    try:
        cursor.execute("INSERT INTO usuarios (nombre_usuario, contrasena, rol) VALUES (?, ?, ?)", 
                       (nombre, contrasena, rol))
        conexion.commit()
        print("‚úÖ Usuario registrado con √©xito.")
    except sqlite3.IntegrityError:
        print("‚ö†Ô∏è Ese nombre de usuario ya existe.")
    conexion.close()

#Iniciar sesi√≥n
def iniciar_sesion():
    nombre = input("Usuario: ").strip()
    contrasena = input("Contrase√±a: ").strip()

    conexion = sqlite3.connect("usuarios.db")
    cursor = conexion.cursor()
    cursor.execute("SELECT rol FROM usuarios WHERE nombre_usuario=? AND contrasena=?", (nombre, contrasena))
    resultado = cursor.fetchone()
    conexion.close()

    if resultado:
        rol = resultado[0]
        print(f"\nüéâ Inicio de sesi√≥n exitoso. Rol: {rol}")
        if rol == "administrador":
            menu_administrador(nombre)
        else:
            menu_estandar(nombre)
    else:
        print("‚ùå Usuario o contrase√±a incorrectos.")

#Ver todos los usuarios (solo admin)
def ver_usuarios():
    conexion = sqlite3.connect("usuarios.db")
    cursor = conexion.cursor()
    cursor.execute("SELECT id, nombre_usuario, rol FROM usuarios")
    usuarios = cursor.fetchall()
    conexion.close()

    print("\nüìã Lista de usuarios:")
    for u in usuarios:
        print(f"ID: {u[0]} | Usuario: {u[1]} | Rol: {u[2]}")

#Eliminar usuario (solo admin)
def eliminar_usuario():
    id_usuario = input("Ingrese el ID del usuario a eliminar: ").strip()
    conexion = sqlite3.connect("usuarios.db")
    cursor = conexion.cursor()
    cursor.execute("DELETE FROM usuarios WHERE id=?", (id_usuario,))
    if cursor.rowcount == 0:
        print("‚ö†Ô∏è No se encontr√≥ un usuario con ese ID.")
    else:
        print("üóëÔ∏è Usuario eliminado correctamente.")
    conexion.commit()
    conexion.close()

#Men√∫ para administradores
def menu_administrador(nombre_usuario):
    while True:
        print(f"\n--- MEN√ö ADMIN ({nombre_usuario}) ---")
        print("1. Ver usuarios")
        print("2. Eliminar usuario")
        print("3. Cerrar sesi√≥n")
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            ver_usuarios()
        elif opcion == "2":
            eliminar_usuario()
        elif opcion == "3":
            print("üëã Sesi√≥n cerrada.")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")

#Men√∫ para usuarios est√°ndar
def menu_estandar(nombre_usuario):
    while True:
        print(f"\n--- MEN√ö USUARIO ({nombre_usuario}) ---")
        print("1. Ver mi perfil")
        print("2. Cerrar sesi√≥n")
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            print(f"üë§ Usuario: {nombre_usuario} (estandar)")
        elif opcion == "2":
            print("üëã Sesi√≥n cerrada.")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")

#Men√∫ principal
def menu_principal():
    while True:
        print("\n=== SISTEMA DE USUARIOS ===")
        print("1. Registrar usuario")
        print("2. Iniciar sesi√≥n")
        print("3. Salir")
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            registrar_usuario()
        elif opcion == "2":
            iniciar_sesion()
        elif opcion == "3":
            print("üëã Gracias por usar el sistema.")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n inv√°lida.")

#Punto de entrada
if __name__ == "__main__":
    crear_base_de_datos()
    menu_principal()

